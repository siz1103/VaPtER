# Generated by Django 5.0.1 on 2025-07-20 21:35

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('company_name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('contact_person', models.CharField(blank=True, max_length=255)),
                ('address', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'customer',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PortList',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('tcp_ports', models.TextField(blank=True, help_text="Comma-separated list of TCP ports (e.g., '22,80,443' or '1-1000')", null=True)),
                ('udp_ports', models.TextField(blank=True, help_text="Comma-separated list of UDP ports (e.g., '53,161,514' or '1-1000')", null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Port List',
                'verbose_name_plural': 'Port Lists',
                'db_table': 'port_list',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Queued', 'Queued'), ('Nmap Scan Running', 'Nmap Scan Running'), ('Nmap Scan Completed', 'Nmap Scan Completed'), ('Finger Scan Running', 'Finger Scan Running'), ('Finger Scan Completed', 'Finger Scan Completed'), ('Gce Scan Running', 'Gce Scan Running'), ('Gce Scan Completed', 'Gce Scan Completed'), ('Web Scan Running', 'Web Scan Running'), ('Web Scan Completed', 'Web Scan Completed'), ('Vuln Lookup Running', 'Vuln Lookup Running'), ('Vuln Lookup Completed', 'Vuln Lookup Completed'), ('Report Generation Running', 'Report Generation Running'), ('Completed', 'Completed'), ('Failed', 'Failed')], default='Pending', max_length=50)),
                ('initiated_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('parsed_nmap_results', models.JSONField(blank=True, null=True)),
                ('parsed_finger_results', models.JSONField(blank=True, null=True)),
                ('parsed_gce_results', models.JSONField(blank=True, null=True)),
                ('parsed_web_results', models.JSONField(blank=True, null=True)),
                ('parsed_vuln_results', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('report_path', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Scan',
                'verbose_name_plural': 'Scans',
                'db_table': 'scan',
                'ordering': ['-initiated_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanDetail',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('open_ports', models.JSONField(blank=True, help_text='Parsed open ports with services and versions', null=True)),
                ('os_guess', models.JSONField(blank=True, help_text='Operating system detection results', null=True)),
                ('nmap_started_at', models.DateTimeField(blank=True, null=True)),
                ('nmap_completed_at', models.DateTimeField(blank=True, null=True)),
                ('finger_started_at', models.DateTimeField(blank=True, null=True)),
                ('finger_completed_at', models.DateTimeField(blank=True, null=True)),
                ('gce_started_at', models.DateTimeField(blank=True, null=True)),
                ('gce_completed_at', models.DateTimeField(blank=True, null=True)),
                ('web_started_at', models.DateTimeField(blank=True, null=True)),
                ('web_completed_at', models.DateTimeField(blank=True, null=True)),
                ('vuln_started_at', models.DateTimeField(blank=True, null=True)),
                ('vuln_completed_at', models.DateTimeField(blank=True, null=True)),
                ('scan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='orchestrator_api.scan')),
            ],
            options={
                'verbose_name': 'Scan Detail',
                'verbose_name_plural': 'Scan Details',
                'db_table': 'scan_detail',
            },
        ),
        migrations.CreateModel(
            name='ScanType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('only_discovery', models.BooleanField(default=False, help_text='Only check if host is alive (ping scan)')),
                ('consider_alive', models.BooleanField(default=False, help_text='Consider all hosts alive (skip ping)')),
                ('be_quiet', models.BooleanField(default=False, help_text='Reduce verbosity of scan output')),
                ('plugin_finger', models.BooleanField(default=False, help_text='Enable fingerprinting plugin')),
                ('plugin_gce', models.BooleanField(default=False, help_text='Enable enumeration plugin')),
                ('plugin_web', models.BooleanField(default=False, help_text='Enable web scanning plugin')),
                ('plugin_vuln_lookup', models.BooleanField(default=False, help_text='Enable vulnerability lookup plugin')),
                ('description', models.TextField(blank=True, null=True)),
                ('port_list', models.ForeignKey(blank=True, help_text='Port list to scan', null=True, on_delete=django.db.models.deletion.SET_NULL, to='orchestrator_api.portlist')),
            ],
            options={
                'verbose_name': 'Scan Type',
                'verbose_name_plural': 'Scan Types',
                'db_table': 'scan_type',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='scan',
            name='scan_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='orchestrator_api.scantype'),
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(help_text='IP address or FQDN', max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='orchestrator_api.customer')),
            ],
            options={
                'verbose_name': 'Target',
                'verbose_name_plural': 'Targets',
                'db_table': 'target',
                'ordering': ['customer', 'name'],
                'unique_together': {('customer', 'address')},
            },
        ),
        migrations.AddField(
            model_name='scan',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='orchestrator_api.target'),
        ),
    ]
