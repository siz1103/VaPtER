# docker-compose.yml

version: '3.8'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: vapter
      POSTGRES_USER: vapter
      POSTGRES_PASSWORD: vapter_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vapter_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vapter"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: vapter
      RABBITMQ_DEFAULT_PASS: vapter_password
      # Configurazione heartbeat e timeout
      RABBITMQ_HEARTBEAT: 60
      RABBITMQ_CHANNEL_MAX: 200
      RABBITMQ_FRAME_MAX: 131072
      # Configurazione per connessioni lunghe
      RABBITMQ_TCP_KEEPALIVE: 'true'
      RABBITMQ_TCP_KEEPALIVE_IDLE: 60
      RABBITMQ_TCP_KEEPALIVE_INTVL: 10
      RABBITMQ_TCP_KEEPALIVE_CNT: 10
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      # Configurazione avanzata RabbitMQ
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - vapter_network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://vapter:vapter_password@postgres:5432/vapter
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=vapter
      - RABBITMQ_PASSWORD=vapter_password
      - DJANGO_SETTINGS_MODULE=vapter_backend.settings
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
    networks:
      - vapter_network
    command: >
      sh -c "
        python manage.py makemigrations orchestrator_api &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py loaddata initial_data.json &&
        python manage.py runserver 0.0.0.0:8000
      "

  backend_consumer:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://vapter:vapter_password@postgres:5432/vapter
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=vapter
      - RABBITMQ_PASSWORD=vapter_password
      - DJANGO_SETTINGS_MODULE=vapter_backend.settings
      - PYTHONUNBUFFERED=1
      # Queue names
      - RABBITMQ_SCAN_STATUS_UPDATE_QUEUE=scan_status_updates
      - RABBITMQ_FINGERPRINT_SCAN_REQUEST_QUEUE=fingerprint_scan_requests
      - RABBITMQ_GCE_SCAN_REQUEST_QUEUE=gce_scan_requests
      - RABBITMQ_WEB_SCAN_REQUEST_QUEUE=web_scan_requests
      - RABBITMQ_VULN_LOOKUP_REQUEST_QUEUE=vuln_lookup_requests
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - vapter_network
    command: python -m vapter_backend.consumer

  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    environment:
      - BACKEND_URL=http://backend:8000
      - PYTHONUNBUFFERED=1
    depends_on:
      - backend
    ports:
      - "8080:8080"
    volumes:
      - ./api_gateway:/app
    networks:
      - vapter_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_API_URL=http://localhost:8080
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - vapter_network
    command: npm run dev -- --host 0.0.0.0 --port 3000

  nmap_scanner:
    build:
      context: ./plugins/nmap_scanner
      dockerfile: Dockerfile
    environment:
      - INTERNAL_API_GATEWAY_URL=http://api_gateway:8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=vapter
      - RABBITMQ_PASSWORD=vapter_password
      - RABBITMQ_NMAP_SCAN_REQUEST_QUEUE=nmap_scan_requests
      - RABBITMQ_SCAN_STATUS_UPDATE_QUEUE=scan_status_updates
      - PYTHONUNBUFFERED=1
    depends_on:
      rabbitmq:
        condition: service_healthy
      api_gateway:
        condition: service_started
    volumes:
      - ./plugins/nmap_scanner:/app
    networks:
      - vapter_network
    restart: unless-stopped
    command: python nmap_scanner.py

  gce_scanner:
    build:
      context: ./plugins/gce_scanner
      dockerfile: Dockerfile
    environment:
      - INTERNAL_API_GATEWAY_URL=http://api_gateway:8080
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=vapter
      - RABBITMQ_PASSWORD=vapter_password
      - RABBITMQ_GCE_SCAN_REQUEST_QUEUE=gce_scan_requests
      - RABBITMQ_SCAN_STATUS_UPDATE_QUEUE=scan_status_updates
      - GCE_SOCKET_PATH=/mnt/gce_sockets/gvmd.sock
      - GCE_USERNAME=vapter_api
      - GCE_PASSWORD=vapter_api
      - GCE_SCAN_CONFIG_ID=daba56c8-73ec-11df-a475-002264764cea
      - GCE_PORT_LIST_ID=c7e03b6c-3bbe-11e1-a057-406186ea4fc5
      - PYTHONUNBUFFERED=1
    depends_on:
      rabbitmq:
        condition: service_healthy
      api_gateway:
        condition: service_started
    volumes:
      - ./plugins/gce_scanner:/app
      - gce_gvmd_socket_vol:/mnt/gce_sockets
    networks:
      - vapter_network
      - gce_network
    restart: unless-stopped
    command: python gce_scanner.py

networks:
  vapter_network:
    driver: bridge
  gce_network:
    external: true
    name: gce_default

volumes:
  postgres_data:
  rabbitmq_data:
  static_volume:
  gce_gvmd_socket_vol:
    external: true
    name: gce_gvmd_socket_vol