version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: vapter_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vapter}
      POSTGRES_USER: ${POSTGRES_USER:-vapter}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vapter123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - vapter_network
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: vapter_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-vapter}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-vapter123}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    networks:
      - vapter_network
    restart: unless-stopped

  # Django Backend Orchestrator
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vapter_backend
    environment:
      - DJANGO_SETTINGS_MODULE=vapter_backend.settings
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-vapter}:${POSTGRES_PASSWORD:-vapter123}@db:5432/${POSTGRES_DB:-vapter}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-vapter}:${RABBITMQ_PASSWORD:-vapter123}@rabbitmq:5672/
      - INTERNAL_API_GATEWAY_URL=http://api_gateway:8080
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://vapter.szini.it:3000,http://localhost:3000}
    volumes:
      - ./backend:/app
      - backend_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - rabbitmq
    networks:
      - vapter_network
    restart: unless-stopped
    command: >
      sh -c "python manage.py makemigrations orchestrator_api &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py loaddata initial_data.json &&
             python manage.py runserver 0.0.0.0:8000"

  # Django Backend Consumer (for RabbitMQ)
  backend_consumer:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vapter_backend_consumer
    environment:
      - DJANGO_SETTINGS_MODULE=vapter_backend.settings
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-vapter}:${POSTGRES_PASSWORD:-vapter123}@db:5432/${POSTGRES_DB:-vapter}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-vapter}:${RABBITMQ_PASSWORD:-vapter123}@rabbitmq:5672/
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - rabbitmq
      - backend
    networks:
      - vapter_network
    restart: unless-stopped
    command: python manage.py consume_scan_status

  # FastAPI Gateway
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: vapter_api_gateway
    environment:
      - DEBUG=${DEBUG:-True}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - BACKEND_URL=http://backend:8000
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://vapter.szini.it:3000,http://localhost:3000}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - ./api_gateway:/app
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - vapter_network
    restart: unless-stopped

# Nmap Scanner Module
  nmap_scanner:
    build:
      context: ./plugins/nmap_scanner
      dockerfile: Dockerfile
    container_name: vapter_nmap_scanner
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-vapter}:${RABBITMQ_PASSWORD:-vapter123}@rabbitmq:5672/
      - INTERNAL_API_GATEWAY_URL=http://api_gateway:8080
      - RABBITMQ_NMAP_SCAN_REQUEST_QUEUE=nmap_scan_requests
      - RABBITMQ_SCAN_STATUS_UPDATE_QUEUE=scan_status_updates
      - NMAP_TIMEOUT=${NMAP_TIMEOUT:-3600}
      - MAX_PARALLEL_SCANS=${MAX_PARALLEL_SCANS:-1}
      - TEMP_RESULTS_DIR=/tmp/nmap_results
      - KEEP_RAW_OUTPUT=${KEEP_RAW_OUTPUT:-false}
    volumes:
      - ./plugins/nmap_scanner:/app
      - nmap_temp_results:/tmp/nmap_results
    depends_on:
      - rabbitmq
      - api_gateway
    networks:
      - vapter_network
    restart: unless-stopped
    # Add security options for scanning
    cap_add:
      - NET_ADMIN
      - NET_RAW
    # Network mode for scanning (optional - use host mode for better network access)
    # network_mode: host  # Uncomment if needed for advanced scanning

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vapter_frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api_gateway
    networks:
      - vapter_network
    restart: unless-stopped

  fingerprint_scanner:
    build: ./plugins/fingerprint_scanner
    container_name: vapter_fingerprint_scanner
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - INTERNAL_API_GATEWAY_URL=http://api_gateway:8080
      - RABBITMQ_URL=amqp://vapter:vapter123@rabbitmq:5672/
      - RABBITMQ_FINGERPRINT_SCAN_REQUEST_QUEUE=fingerprint_scan_requests
      - RABBITMQ_SCAN_STATUS_UPDATE_QUEUE=scan_status_updates
      - FINGERPRINT_TIMEOUT_PER_PORT=60
      - MAX_CONCURRENT_FINGERPRINTS=10
    depends_on:
      - rabbitmq
      - api_gateway
    networks:
      - vapter_network
    volumes:
      - fingerprint_results:/tmp/fingerprint_results
    
volumes:
  postgres_data:
  rabbitmq_data:
  backend_media:
  nmap_temp_results:
  fingerprint_results:
  
networks:
  vapter_network:
    driver: bridge